// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MicroServiceUserContext))]
    [Migration("20241021164808_UserDB")]
    partial class UserDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(512)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(512)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8016),
                            DateBirth = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 2
                        },
                        new
                        {
                            UserID = 2,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8030),
                            DateBirth = new DateTime(1985, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 2
                        },
                        new
                        {
                            UserID = 3,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8033),
                            DateBirth = new DateTime(1992, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "carloslopez@example.com",
                            Name = "Carlos Lopez",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 2
                        },
                        new
                        {
                            UserID = 4,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8035),
                            DateBirth = new DateTime(1995, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mariagarcia@example.com",
                            Name = "Maria Garcia",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 2
                        },
                        new
                        {
                            UserID = 5,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8037),
                            DateBirth = new DateTime(1988, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pedrofernandez@example.com",
                            Name = "Pedro Fernandez",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 2
                        },
                        new
                        {
                            UserID = 6,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8039),
                            DateBirth = new DateTime(1993, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lauramartinez@example.com",
                            Name = "Laura Martinez",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 1
                        },
                        new
                        {
                            UserID = 7,
                            CreateDate = new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8040),
                            DateBirth = new DateTime(1987, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "davidrodriguez@example.com",
                            Name = "David Rodriguez",
                            Password = new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 },
                            PasswordSalt = new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 },
                            Type = 1
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
