using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class UserDB : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    UserID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(150)", nullable: false),
                    Email = table.Column<string>(type: "nvarchar(100)", nullable: false),
                    Password = table.Column<byte[]>(type: "varbinary(512)", nullable: false),
                    PasswordSalt = table.Column<byte[]>(type: "varbinary(512)", nullable: false),
                    Type = table.Column<int>(type: "int", nullable: false),
                    Photo = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    DateBirth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_User", x => x.UserID);
                });

            migrationBuilder.InsertData(
                table: "User",
                columns: new[] { "UserID", "CreateDate", "DateBirth", "Email", "Name", "Password", "PasswordSalt", "Photo", "Type" },
                values: new object[,]
                {
                    { 1, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8016), new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), "johndoe@example.com", "John Doe", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 2 },
                    { 2, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8030), new DateTime(1985, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), "janesmith@example.com", "Jane Smith", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 2 },
                    { 3, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8033), new DateTime(1992, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), "carloslopez@example.com", "Carlos Lopez", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 2 },
                    { 4, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8035), new DateTime(1995, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), "mariagarcia@example.com", "Maria Garcia", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 2 },
                    { 5, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8037), new DateTime(1988, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), "pedrofernandez@example.com", "Pedro Fernandez", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 2 },
                    { 6, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8039), new DateTime(1993, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), "lauramartinez@example.com", "Laura Martinez", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 1 },
                    { 7, new DateTime(2024, 10, 21, 13, 48, 8, 82, DateTimeKind.Local).AddTicks(8040), new DateTime(1987, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), "davidrodriguez@example.com", "David Rodriguez", new byte[] { 93, 211, 31, 23, 70, 80, 172, 30, 89, 218, 76, 127, 167, 69, 146, 32, 87, 81, 185, 6, 215, 7, 145, 235, 58, 50, 78, 16, 64, 28, 156, 114, 137, 121, 213, 205, 174, 55, 248, 180, 29, 9, 224, 3, 85, 177, 247, 58, 210, 202, 15, 143, 5, 184, 211, 255, 66, 166, 28, 108, 238, 177, 165, 179 }, new byte[] { 156, 165, 164, 123, 225, 245, 132, 207, 44, 88, 5, 61, 196, 168, 97, 25, 66, 125, 29, 200, 236, 162, 30, 42, 41, 249, 216, 101, 224, 74, 139, 244, 98, 134, 30, 22, 231, 26, 52, 184, 136, 195, 195, 115, 47, 236, 175, 157, 190, 126, 10, 35, 198, 210, 146, 204, 141, 185, 88, 118, 164, 108, 64, 2, 130, 30, 140, 176, 80, 6, 196, 7, 86, 109, 212, 49, 253, 56, 40, 217, 81, 204, 70, 224, 107, 106, 205, 63, 241, 123, 95, 121, 45, 30, 232, 152, 187, 92, 39, 59, 4, 114, 217, 77, 45, 96, 76, 251, 170, 206, 203, 197, 143, 44, 108, 162, 234, 172, 65, 224, 231, 241, 213, 113, 146, 169, 189, 137 }, null, 1 }
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "User");
        }
    }
}
